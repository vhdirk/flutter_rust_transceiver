// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/transceiver.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.33';

  @override
  int get rustContentHash => -841605283;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_flutter_rust_transceiver',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  NfcTransceiver nfcTransceiverNew(
      {required FutureOr<ResultVecU8NfcTranceiveError> Function(
              int, int, Uint8List)
          readSingleBlockCb,
      required FutureOr<ResultVecU8NfcTranceiveError> Function(
              int, int, Uint8List)
          writeSingleBlockCb,
      required FutureOr<ResultVecU8NfcTranceiveError> Function(
              int, int, Uint8List)
          customCommandCb,
      dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NfcTransceiver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NfcTransceiver;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NfcTransceiverPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ResultVecU8NfcTranceiveError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ResultVecU8NfcTranceiveError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ResultVecU8NfcTranceiveErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  NfcTransceiver nfcTransceiverNew(
      {required FutureOr<ResultVecU8NfcTranceiveError> Function(
              int, int, Uint8List)
          readSingleBlockCb,
      required FutureOr<ResultVecU8NfcTranceiveError> Function(
              int, int, Uint8List)
          writeSingleBlockCb,
      required FutureOr<ResultVecU8NfcTranceiveError> Function(
              int, int, Uint8List)
          customCommandCb,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_u_8_u_32_list_prim_u_8_strict_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
            readSingleBlockCb, serializer);
        sse_encode_DartFn_Inputs_u_8_u_32_list_prim_u_8_strict_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
            writeSingleBlockCb, serializer);
        sse_encode_DartFn_Inputs_u_8_u_32_list_prim_u_8_strict_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
            customCommandCb, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver,
        decodeErrorData: null,
      ),
      constMeta: kNfcTransceiverNewConstMeta,
      argValues: [readSingleBlockCb, writeSingleBlockCb, customCommandCb],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNfcTransceiverNewConstMeta => const TaskConstMeta(
        debugName: "NfcTransceiver_new",
        argNames: [
          "readSingleBlockCb",
          "writeSingleBlockCb",
          "customCommandCb"
        ],
      );

  Future<void> Function(int, dynamic, dynamic, dynamic)
      encode_DartFn_Inputs_u_8_u_32_list_prim_u_8_strict_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          FutureOr<ResultVecU8NfcTranceiveError> Function(int, int, Uint8List)
              raw) {
    return (callId, rawArg0, rawArg1, rawArg2) async {
      final arg0 = dco_decode_u_8(rawArg0);
      final arg1 = dco_decode_u_32(rawArg1);
      final arg2 = dco_decode_list_prim_u_8_strict(rawArg2);

      final rawOutput = await raw(arg0, arg1, arg2);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NfcTransceiver => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NfcTransceiver => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ResultVecU8NfcTranceiveError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ResultVecU8NfcTranceiveError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError;

  @protected
  NfcTransceiver
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NfcTransceiver.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ResultVecU8NfcTranceiveError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ResultVecU8NfcTranceiveError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<ResultVecU8NfcTranceiveError> Function(int, int, Uint8List)
      dco_decode_DartFn_Inputs_u_8_u_32_list_prim_u_8_strict_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  NfcTransceiver
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NfcTransceiver.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ResultVecU8NfcTranceiveError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ResultVecU8NfcTranceiveError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  NfcTransceiver
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NfcTransceiver.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ResultVecU8NfcTranceiveError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ResultVecU8NfcTranceiveError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  NfcTransceiver
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NfcTransceiver.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ResultVecU8NfcTranceiveError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ResultVecU8NfcTranceiveError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver(
          NfcTransceiver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          ResultVecU8NfcTranceiveError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_u_8_u_32_list_prim_u_8_strict_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          FutureOr<ResultVecU8NfcTranceiveError> Function(int, int, Uint8List)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_u_8_u_32_list_prim_u_8_strict_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        PlatformPointerUtil.ptrToInt(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNFCTransceiver(
          NfcTransceiver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResultVecu8NFCTranceiveError(
          ResultVecU8NfcTranceiveError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
